# CeesarCode Multi-Language Judge - Full Language Support
# This Dockerfile includes all supported programming languages

FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    wget \
    git \
    build-essential \
    software-properties-common \
    apt-transport-https \
    ca-certificates \
    gnupg \
    lsb-release \
    unzip \
    && rm -rf /var/lib/apt/lists/*

# Install Python 3
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js and TypeScript
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs \
    && npm install -g typescript \
    && rm -rf /var/lib/apt/lists/*

# Install Go
RUN wget https://go.dev/dl/go1.21.5.linux-amd64.tar.gz \
    && tar -C /usr/local -xzf go1.21.5.linux-amd64.tar.gz \
    && rm go1.21.5.linux-amd64.tar.gz
ENV PATH="/usr/local/go/bin:${PATH}"

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Install Java (OpenJDK 17)
RUN apt-get update && apt-get install -y \
    openjdk-17-jdk \
    && rm -rf /var/lib/apt/lists/*
ENV JAVA_HOME="/usr/lib/jvm/java-17-openjdk-amd64"

# Install Scala
RUN wget https://github.com/lampepfl/dotty/releases/download/3.3.1/scala3-3.3.1.tar.gz \
    && tar -xzf scala3-3.3.1.tar.gz \
    && mv scala3-3.3.1 /opt/scala \
    && rm scala3-3.3.1.tar.gz
ENV PATH="/opt/scala/bin:${PATH}"

# Install Kotlin
RUN wget https://github.com/JetBrains/kotlin/releases/download/v1.9.21/kotlin-compiler-1.9.21.zip \
    && unzip kotlin-compiler-1.9.21.zip \
    && mv kotlinc /opt/kotlin \
    && rm kotlin-compiler-1.9.21.zip
ENV PATH="/opt/kotlin/bin:${PATH}"

# Install Ruby
RUN apt-get update && apt-get install -y \
    ruby \
    ruby-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Swift
RUN wget https://download.swift.org/swift-5.9.2-release/ubuntu2204/swift-5.9.2-RELEASE/swift-5.9.2-RELEASE-ubuntu22.04.tar.gz \
    && tar -xzf swift-5.9.2-RELEASE-ubuntu22.04.tar.gz \
    && mv swift-5.9.2-RELEASE-ubuntu22.04 /opt/swift \
    && rm swift-5.9.2-RELEASE-ubuntu22.04.tar.gz
ENV PATH="/opt/swift/usr/bin:${PATH}"

# Install C/C++ compilers (should already be available with build-essential)
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Create app directory
WORKDIR /app

# Copy the application files
COPY . .

# Build the Go backend
RUN cd backend/cmd/server && go build -o ../../../bin/server .

# Build the Rust executor
RUN cd executor-rs && cargo build --release && cp target/release/executor ../bin/executor

# Install Node.js dependencies and build frontend
RUN cd frontend && npm install && npm run build

# Copy frontend build to dist
RUN cp -r frontend/dist/* dist/

# Create a script to verify all languages are working
RUN echo '#!/bin/bash\n\
echo "Verifying language installations..."\n\
echo "Python: $(python3 --version)"\n\
echo "Node.js: $(node --version)"\n\
echo "TypeScript: $(tsc --version)"\n\
echo "Go: $(go version)"\n\
echo "Rust: $(rustc --version)"\n\
echo "Java: $(javac -version 2>&1)"\n\
echo "Scala: $(scala -version 2>&1)"\n\
echo "Kotlin: $(kotlinc -version)"\n\
echo "Ruby: $(ruby --version)"\n\
echo "Swift: $(swift --version)"\n\
echo "GCC: $(gcc --version | head -1)"\n\
echo "G++: $(g++ --version | head -1)"\n\
echo "All languages verified!"' > /app/verify-languages.sh \
    && chmod +x /app/verify-languages.sh

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/api/problems || exit 1

# Start the server
CMD ["./bin/server"]
